// Unpublished work. Copyright 2022 Siemens
// 
// File generated on Thu Jul 04 11:23:56 CEST 2024 at frascati.eit.uni-kl.de by dschwarz
// SVA module automatically generated by command 'create_sva_module'
// 
// 



module checker_m(
// BEGIN OSS_PORT: DO NOT EDIT THIS SECTION! IT IS AUTOMATICALLY GENERATED AND UPDATED BY COMMAND 'CREATE_SVA_MODULE'
	input rst_n,
	input clk,
	input irq_q_1,
	input irq_q_2,
	input rst,
	input struct packed {logic a_valid; logic[2:0] a_opcode; logic[2:0] a_param; logic[1:0] a_size; logic[7:0] a_source; logic[31:0] a_address; logic[3:0] a_mask; logic[31:0] a_data; struct packed {logic[4:0] rsvd; logic[3:0] instr_type; logic[6:0] cmd_intg; logic[6:0] data_intg; } a_user; logic d_ready; } tl_cpu2csr_1,
	input struct packed {logic a_valid; logic[2:0] a_opcode; logic[2:0] a_param; logic[1:0] a_size; logic[7:0] a_source; logic[31:0] a_address; logic[3:0] a_mask; logic[31:0] a_data; struct packed {logic[4:0] rsvd; logic[3:0] instr_type; logic[6:0] cmd_intg; logic[6:0] data_intg; } a_user; logic d_ready; } tl_cpu2csr_2,
	input struct packed {logic d_valid; logic[2:0] d_opcode; logic[2:0] d_param; logic[1:0] d_size; logic[7:0] d_source; logic d_sink; logic[31:0] d_data; struct packed {logic[6:0] rsp_intg; logic[6:0] data_intg; } d_user; logic d_error; logic a_ready; } tl_csr2cpu_1,
	input struct packed {logic d_valid; logic[2:0] d_opcode; logic[2:0] d_param; logic[1:0] d_size; logic[7:0] d_source; logic d_sink; logic[31:0] d_data; struct packed {logic[6:0] rsp_intg; logic[6:0] data_intg; } d_user; logic d_error; logic a_ready; } tl_csr2cpu_2,
	input struct packed {logic d_valid; logic[2:0] d_opcode; logic[2:0] d_param; logic[1:0] d_size; logic[7:0] d_source; logic d_sink; logic[31:0] d_data; struct packed {logic[6:0] rsp_intg; logic[6:0] data_intg; } d_user; logic d_error; logic a_ready; } tl_d2pmp_1,
	input struct packed {logic d_valid; logic[2:0] d_opcode; logic[2:0] d_param; logic[1:0] d_size; logic[7:0] d_source; logic d_sink; logic[31:0] d_data; struct packed {logic[6:0] rsp_intg; logic[6:0] data_intg; } d_user; logic d_error; logic a_ready; } tl_d2pmp_2,
	input struct packed {logic a_valid; logic[2:0] a_opcode; logic[2:0] a_param; logic[1:0] a_size; logic[7:0] a_source; logic[31:0] a_address; logic[3:0] a_mask; logic[31:0] a_data; struct packed {logic[4:0] rsvd; logic[3:0] instr_type; logic[6:0] cmd_intg; logic[6:0] data_intg; } a_user; logic d_ready; } tl_h2pmp_1,
	input struct packed {logic a_valid; logic[2:0] a_opcode; logic[2:0] a_param; logic[1:0] a_size; logic[7:0] a_source; logic[31:0] a_address; logic[3:0] a_mask; logic[31:0] a_data; struct packed {logic[4:0] rsvd; logic[3:0] instr_type; logic[6:0] cmd_intg; logic[6:0] data_intg; } a_user; logic d_ready; } tl_h2pmp_2,
	input struct packed {logic a_valid; logic[2:0] a_opcode; logic[2:0] a_param; logic[1:0] a_size; logic[7:0] a_source; logic[31:0] a_address; logic[3:0] a_mask; logic[31:0] a_data; struct packed {logic[4:0] rsvd; logic[3:0] instr_type; logic[6:0] cmd_intg; logic[6:0] data_intg; } a_user; logic d_ready; } tl_pmp2d_1,
	input struct packed {logic a_valid; logic[2:0] a_opcode; logic[2:0] a_param; logic[1:0] a_size; logic[7:0] a_source; logic[31:0] a_address; logic[3:0] a_mask; logic[31:0] a_data; struct packed {logic[4:0] rsvd; logic[3:0] instr_type; logic[6:0] cmd_intg; logic[6:0] data_intg; } a_user; logic d_ready; } tl_pmp2d_2,
	input struct packed {logic d_valid; logic[2:0] d_opcode; logic[2:0] d_param; logic[1:0] d_size; logic[7:0] d_source; logic d_sink; logic[31:0] d_data; struct packed {logic[6:0] rsp_intg; logic[6:0] data_intg; } d_user; logic d_error; logic a_ready; } tl_pmp2h_1,
	input struct packed {logic d_valid; logic[2:0] d_opcode; logic[2:0] d_param; logic[1:0] d_size; logic[7:0] d_source; logic d_sink; logic[31:0] d_data; struct packed {logic[6:0] rsp_intg; logic[6:0] data_intg; } d_user; logic d_error; logic a_ready; } tl_pmp2h_2
// END OSS_PORT: 18
);


default clocking default_clk @(posedge clk); endclocking


// 
// A plain SVA assertion
// 
dummy_a: assert property (disable iff (rst)
	1'b1);


endmodule

bind miter_top checker_m checker_inst (
// BEGIN OSS_BIND: DO NOT EDIT THIS SECTION! IT IS AUTOMATICALLY GENERATED AND UPDATED BY COMMAND 'CREATE_SVA_MODULE'
	.rst_n(rst_n),
	.clk(clk),
	.irq_q_1(irq_q_1),
	.irq_q_2(irq_q_2),
	.rst(rst),
	.tl_cpu2csr_1(tl_cpu2csr_1),
	.tl_cpu2csr_2(tl_cpu2csr_2),
	.tl_csr2cpu_1(tl_csr2cpu_1),
	.tl_csr2cpu_2(tl_csr2cpu_2),
	.tl_d2pmp_1(tl_d2pmp_1),
	.tl_d2pmp_2(tl_d2pmp_2),
	.tl_h2pmp_1(tl_h2pmp_1),
	.tl_h2pmp_2(tl_h2pmp_2),
	.tl_pmp2d_1(tl_pmp2d_1),
	.tl_pmp2d_2(tl_pmp2d_2),
	.tl_pmp2h_1(tl_pmp2h_1),
	.tl_pmp2h_2(tl_pmp2h_2)
// END OSS_BIND: 18
);


