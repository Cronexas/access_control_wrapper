module property_checker
  (
  input clk,
  input rst
  );

default clocking default_clk @(posedge clk); endclocking

`include "tidal.sv"

`include "state_equivalence.sva"
sequence U1_pmp2d_defined_all_except_valid_and_ready;
	//Opcode 0 := PutFullData; 1 := PutPartialData; 4 := Get (Host -> Device)
	//Opcode 0 := AccessAck(Put); 1 := AccessAckData (Get)  (Device -> Host)
	//Pmp2d is of type Host ->Device
	( U1.tl_pmp2d.a_opcode == 3'b000 or
	 U1.tl_pmp2d.a_opcode == 3'b001 or
	 U1.tl_pmp2d.a_opcode == 3'b100)  and
	( U1.tl_pmp2d.a_param == 3'b000) and
	( U1.tl_pmp2d.a_size == 2'b00 or
	 U1.tl_pmp2d.a_size == 2'b01 or
	 U1.tl_pmp2d.a_size == 2'b10)  and
	( U1.tl_pmp2d.a_address >= 32'b0)  and
	( U1.tl_pmp2d.a_mask == 4'b0000 or
	 U1.tl_pmp2d.a_mask == 4'b0001 or
	 U1.tl_pmp2d.a_mask == 4'b0010 or
	 U1.tl_pmp2d.a_mask == 4'b0100 or
	 U1.tl_pmp2d.a_mask == 4'b1000 or
	 U1.tl_pmp2d.a_mask == 4'b0011 or
	 U1.tl_pmp2d.a_mask == 4'b0110 or
	 U1.tl_pmp2d.a_mask == 4'b1100 or
	 U1.tl_pmp2d.a_mask == 4'b1111)  and
	( U1.tl_pmp2d.a_data >= 32'b0) and
	( U1.tl_pmp2d.a_user >= '0);
	// tl_pmp2d.d_error == tl_d2pmp.d_error;
endsequence

sequence U2_pmp2d_defined_all_except_valid_and_ready;


	//Opcode 0 := PutFullData; 1 := PutPartialData; 4 := Get (Host -> Device)
	//Opcode 0 := AccessAck(Put); 1 := AccessAckData (Get)  (Device -> Host)
	//Pmp2d is of type Host ->Device
	( U2.tl_pmp2d.a_opcode == 3'b000 or
	 U2.tl_pmp2d.a_opcode == 3'b001 or
	 U2.tl_pmp2d.a_opcode == 3'b100)  and
	( U2.tl_pmp2d.a_param == 3'b000) and
	( U2.tl_pmp2d.a_size == 2'b00 or
	 U2.tl_pmp2d.a_size == 2'b01 or
	 U2.tl_pmp2d.a_size == 2'b10)  and
	( U2.tl_pmp2d.a_address >= 32'b0)  and
	( U2.tl_pmp2d.a_mask == 4'b0000 or
	 U2.tl_pmp2d.a_mask == 4'b0001 or
	 U2.tl_pmp2d.a_mask == 4'b0010 or
	 U2.tl_pmp2d.a_mask == 4'b0100 or
	 U2.tl_pmp2d.a_mask == 4'b1000 or
	 U2.tl_pmp2d.a_mask == 4'b0011 or
	 U2.tl_pmp2d.a_mask == 4'b0110 or
	 U2.tl_pmp2d.a_mask == 4'b1100 or
	 U2.tl_pmp2d.a_mask == 4'b1111)  and
	( U2.tl_pmp2d.a_data >= 32'b0) and
	( U2.tl_pmp2d.a_user >= '0);
	// tl_pmp2d.d_error == tl_d2pmp.d_error;
endsequence



sequence master_sends_illegal_messages;
	U1.pmp_req_err[0] == 1'b1 &&
	U2.pmp_req_err[0] == 1'b1;
endsequence

sequence no_go_to_idle;
	U1.go_to_idle_d == 0'b0 &&
	U2.go_to_idle_d == 0'b0;
endsequence

sequence h2pmp_all_equal_except_address_and_data;
	U1.tl_h2pmp.a_valid == U2.tl_h2pmp.a_valid &&
	U1.tl_h2pmp.a_opcode == U2.tl_h2pmp.a_opcode &&
	U1.tl_h2pmp.a_param == U2.tl_h2pmp.a_param &&
	U1.tl_h2pmp.a_size == U2.tl_h2pmp.a_size &&
	U1.tl_h2pmp.a_source == U2.tl_h2pmp.a_source &&
	U1.tl_h2pmp.a_mask == U2.tl_h2pmp.a_mask &&
	U1.tl_h2pmp.a_user == U2.tl_h2pmp.a_user;

endsequence

sequence h2pmp_all_equal_except_data;
	U1.tl_h2pmp.a_valid == U2.tl_h2pmp.a_valid &&
	U1.tl_h2pmp.a_opcode == U2.tl_h2pmp.a_opcode &&
	U1.tl_h2pmp.a_param == U2.tl_h2pmp.a_param &&
	U1.tl_h2pmp.a_size == U2.tl_h2pmp.a_size &&
	U1.tl_h2pmp.a_source == U2.tl_h2pmp.a_source &&
	U1.tl_h2pmp.a_mask == U2.tl_h2pmp.a_mask &&
	U1.tl_h2pmp.a_address == U2.tl_h2pmp.a_address &&
	U1.tl_h2pmp.a_user == U2.tl_h2pmp.a_user;

endsequence
/*
sequence master_recieves_error_to_illegal_message;
	U1.tl_err_rsp_device_outstanding == 
	U2.tl_err_rsp_device_outstanding
endsequence
*/
sequence h2pmp_limitations;
	//1)The first prototype throw error for outgoing signals.
	//One Instance had a valid incoming signal, the other didn't, 
	//therefor for obvious reason (valid check) signal get's blocked 
	/*
	U1.tl_h2pmp.a_valid == 1'b1 &&  
	U2.tl_h2pmp.a_valid == 1'b1;
	*/
	U1.tl_h2pmp.a_valid == U2.tl_h2pmp.a_valid;
	

endsequence
function automatic input_equivalence();
    input_equivalence = (
        (U1.clk == U2.clk) &&
        (U1.rst == U2.rst) &&
        (U1.tl_cpu2csr == U2.tl_cpu2csr) &&
        (U1.tl_d2pmp == U2.tl_d2pmp) &&
	//Added this signal, to because we expect the host the be ready again to be able to know he recivied the err response
	//
        (U1.tl_h2pmp.d_ready == U2.tl_h2pmp.d_ready) &&
        (U1.tl_h2pmp.a_valid == U2.tl_h2pmp.a_valid) //&&
        //U1.tl_h2pmp == U2.tl_h2pmp
        );
endfunction

function automatic input_equivalence2();
    input_equivalence2 = (
        (U1.clk == U2.clk) &&
        (U1.rst == U2.rst) &&
        (U1.tl_cpu2csr == U2.tl_cpu2csr) &&
        (U1.tl_d2pmp == U2.tl_d2pmp) &&
        U1.tl_h2pmp == U2.tl_h2pmp
        );
endfunction

sequence pmp2d_same_except_data;
	U1.tl_pmp2d.a_valid == U2.tl_pmp2d.a_valid &&
	U1.tl_pmp2d.a_opcode == U2.tl_pmp2d.a_opcode &&
	U1.tl_pmp2d.a_param == U2.tl_pmp2d.a_param &&
	U1.tl_pmp2d.a_size == U2.tl_pmp2d.a_size &&
	U1.tl_pmp2d.a_source == U2.tl_pmp2d.a_source &&
	U1.tl_pmp2d.a_mask == U2.tl_pmp2d.a_mask &&
	U1.tl_pmp2d.a_address == U2.tl_pmp2d.a_address &&
	U1.tl_pmp2d.a_user == U2.tl_pmp2d.a_user;
endsequence

function automatic output_equivalence();
    output_equivalence = (
        U1.irq_q == U2.irq_q &&
        U1.tl_csr2cpu.d_valid == U2.tl_csr2cpu.d_valid &&
	U1.tl_csr2cpu.a_ready == U2.tl_csr2cpu.a_ready &&
        U1.tl_pmp2d == U2.tl_pmp2d 
    );
endfunction

`begin_tda(ops)

// In general, you shouldn't make assumptions on outputs, only on states and inputs
  property upec_base;
//	t ## 0 U1_pmp2d_defined_all_except_valid_and_ready and
//	t ## 0 U2_pmp2d_defined_all_except_valid_and_ready and
	t ## 0 state_equivalence() and
	t ## 0 input_equivalence() and
	t ## 1 input_equivalence2() and
	t ## 2 input_equivalence2() and
//	t ## 1 U1_pmp2d_defined_all_except_valid_and_ready and
//	t ## 1 U2_pmp2d_defined_all_except_valid_and_ready 
	//Discuss Dino: transition from blocking to idle should not send pmp2d = h2pmp
	//t ## 0 no_go_to_idle and
	//t ## 1 no_go_to_idle and
	//t ## 2 no_go_to_idle and
	//Assume h2pmp is equal except for address range and content of data.
	//t ## 0 h2pmp_all_equal_except_address_and_data and
	//t ## 1 h2pmp_all_equal_except_address_and_data and
	//t ## 2 h2pmp_all_equal_except_address_and_data and
	t ## 0 h2pmp_all_equal_except_data and
	//t ## 1 h2pmp_all_equal_except_data and
	//t ## 2 h2pmp_all_equal_except_data and
	//Assume illegal messages by err of pmp
	t ## 0 master_sends_illegal_messages //and
	//t ## 1 master_sends_illegal_messages
	implies
	t ## 0 output_equivalence() and
	t ## 1 output_equivalence() and
	t ## 1 state_equivalence2() and
	t ## 2 output_equivalence() and
	t ## 2 state_equivalence2();
  endproperty


  property upec_step;
	//t ## 0 U1_pmp2d_defined_all_except_valid_and_ready and
	//t ## 0 U2_pmp2d_defined_all_except_valid_and_ready and
	//h2pmp_limitations has been added to limit h2pmp in some cases. 
	t ## 0 h2pmp_limitations and
	t ## 0 state_equivalence2() and
	t ## 0 input_equivalence() and
	t ## 1 input_equivalence2() and
	//t ## 2 input_equivalence2() and
	//t ## 1 U1_pmp2d_defined_all_except_valid_and_ready and
 	//t ## 1 U2_pmp2d_defined_all_except_valid_and_ready 
	//Discuss Dino: transition from blocking to idle should not send pmp2d = h2pmp
	//t ## 0 no_go_to_idle and
	//t ## 1 no_go_to_idle and
	//t ## 2 no_go_to_idle and
	//Assume h2pmp is equal except for address range and content of data.
	//t ## 0 h2pmp_all_equal_except_address_and_data and
	//t ## 1 h2pmp_all_equal_except_address_and_data and
	//t ## 2 h2pmp_all_equal_except_address_and_data and
	//t ## 0 h2pmp_all_equal_except_data and
	//t ## 1 h2pmp_all_equal_except_data and
	//t ## 2 h2pmp_all_equal_except_data and
	//Assume illegal messages by err of pmp
	// 2) We want to assume that both instances have an erroues message.
	//   We trust pmp therefor we expect it to catch access that are not allowed
	t ## 0 master_sends_illegal_messages //and
	//t ## 1 master_sends_illegal_messages
	implies
	t ## 0 output_equivalence() and
	t ## 1 output_equivalence() and
	// 3) See also state_equivalence.sva 3)
	t ## 1 state_equivalence2() //and
	//t ## 2 output_equivalence() and
	//t ## 2 state_equivalence2();
  endproperty

assert_upec_base: assert property (upec_base);
assert_upec_step: assert property (upec_step);

`end_tda

endmodule

bind miter_top property_checker checker_bind(.clk(clk), .rst(rst));