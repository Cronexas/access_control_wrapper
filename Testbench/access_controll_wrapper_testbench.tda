//Comapre to: github.com/mortepau/tfe4171

//Imports necessary for dataclasses
import tlul_pkg::*;
import ibex_pkg::*;




module ACW_property_suite #(BaseAddressTB,NumPMPEntriesSelecterTB) (rst,clk,irq_q,tl_h2pmp, tl_pmp2h,tl_d2pmp,tl_pmp2d,tl_cpu2csr, tl_csr2cpu,csr_pmp_cfg,current_state,wr_en_csr, rd_data_csr, activate_cpu_err_resp_q, 
ack_outstanding_q,pmp_req_err, err_rsp_sent_q, go_to_idle_q, go_to_idle_d, irq_d, tl_err_rsp_device_outstanding, number_bits_a_mask, a_size_int, activate_cpu_err_resp_d,
denied_reg_addr_q, ack_outstanding_d, denied_reg_type_q, intr_from_prim_hw_intr, INTR_STATE_q, INTR_ENABLE_q ,INTR_TEST_q, INTR_ENABLE_d, INTR_STATE_d, INTR_TEST_d, next_state, 
pmp_req_addr, pmp_req_type, valid_size_matching
);

//Parameters aa
parameter int unsigned          PMPGranularity = 0;    
parameter int unsigned          PMPNumChan = 1;
parameter int unsigned          PMPNumRegions = 16;
parameter logic			NumPMPEntriesSelecterTB = 1'b0;// 
parameter int unsigned 		Number32BitRegisterNonPMP = 7;
parameter int unsigned 		NumberBytesRegisterNonPMP = 4*Number32BitRegisterNonPMP;
parameter logic[23:0]		BaseAddressTB= 24'b0;// 
parameter int unsigned 		AdjustedPMPNumRegions = (NumPMPEntriesSelecterTB) ? (PMPNumRegions << 2) : PMPNumRegions;
parameter int unsigned		NumberConfigEntries =  $ceil(AdjustedPMPNumRegions/4);
parameter int unsigned		TotalIbexCSR = AdjustedPMPNumRegions + NumberConfigEntries;
parameter logic[1:0] 		idle = 2'b00;
parameter logic[1:0]		block_start = 2'b01;
parameter logic[1:0]		block_idle = 2'b10;
parameter logic[1:0]		block_err = 2'b11;
//parameter logic[31:0]	go_idle_addr = 32'h000003c1; //961 dec, 32'h03c1 0000
parameter int unsigned 		go_idle_addr = 193;
parameter int unsigned 		return_denied_reg_addr = 194;
parameter int unsigned 		return_denied_reg_type = 195;
parameter int unsigned 		return_current_state = 196;
//parameter enum logic {idle = 1'b0, block = 1'b1};  
$display("The value of NumPMPEntriesSelecter is:%b", NumPMPEntriesSelecterTB);
$display("The value of AdjustedPMPNumRegions is:%d", AdjustedPMPNumRegions);




//All IO of module access_control_wrapper.sv
input logic 				rst;
input logic 				clk;
input logic 				irq_q;
input logic 				irq_d;
input tlul_pkg::tl_h2d_t 		tl_h2pmp;               		//TLUL message untrusted master to wrapper (pmp)
input tlul_pkg::tl_d2h_t 		tl_pmp2h;               	//error response message to untrusted master if permission denied
input tlul_pkg::tl_d2h_t	        tl_d2pmp;                 		//incoming message from device to pmp, gets relayed without change
input tlul_pkg::tl_h2d_t	        tl_pmp2d;               	//send message to device, if permission granted by pmp
input tlul_pkg::tl_h2d_t      		tl_cpu2csr;
input tlul_pkg::tl_d2h_t        	tl_csr2cpu;
input tlul_pkg::tl_d2h_t		tl_err_rsp_device_outstanding;        
//Add additional signals of wrapper here.
input ibex_pkg::pmp_cfg_t		csr_pmp_cfg [AdjustedPMPNumRegions];
input logic[1:0]			current_state;
input logic[1:0]			next_state;
input logic				wr_en_csr[(TotalIbexCSR-1):0];
input logic 				activate_cpu_err_resp_q;
input logic 				activate_cpu_err_resp_d;
input logic 				ack_outstanding_q;
input logic 				pmp_req_err [PMPNumChan];
input logic 				err_rsp_sent_q;
input logic 				go_to_idle_q;
input logic 				go_to_idle_d;
input logic [31:0]			rd_data_csr[(TotalIbexCSR - 1):0];
input logic [31:0]			denied_reg_addr_q;
input int				number_bits_a_mask;
input int				a_size_int;
input logic 				ack_outstanding_d;
input logic [2:0]			denied_reg_type_q;
input logic 				intr_from_prim_hw_intr;
input logic				INTR_STATE_q;
input logic				INTR_ENABLE_q;
input logic				INTR_TEST_q;
input logic 				INTR_ENABLE_d;
input logic 				INTR_STATE_d;
input logic				INTR_TEST_d;
input logic [33:0]             		pmp_req_addr [PMPNumChan];     
input ibex_pkg::pmp_req_e  		pmp_req_type [PMPNumChan];
input logic 				valid_size_matching;
//input logic 				pmp_reg_err_q;
//input logic 				pmp_reg_err_d;
//{} 


//For Discussion:
//1)Actual ibex_pmp.sv input csr_pmp_cfg_i is type pmp_cfg_t (see ibex_pkg.sv) 
//1)Each csr consist of 8 Bits. but here are always 32 bit mapped on 6 bits ?
//2)Ask Dino for await_o
`define true 1
`include "tidal.sv"
`begin_tda(ops)
	//
	
	/////////////////////////////////
	// 	PMP Blackbox???(:      //
	////////////////////////////////
	// CSR 5*32 Bits(where First 1*32 is acutal CSR). 4*32 Address
	// for csr packages ibex_csr 
	// wr_en_i: enables write of wr_data_i to register
	// wr_data_i: input data; default 32 bit
	// clk,rst : clock and reset (register set to all 0)
	// rd_data_o: output data; equal to register value.
	// rd_error_o, by default not defined, because shadow is set off.
	// ACATUAL PMP-CSR (in Ibex_pkg only 6 bits defined)
	// We have 4x 8 bit . 8 bit are shown in RISC-V Doc Fig 3.271 CSR[7:0]
	// CSR[7] : Lock write to configuration register and associated addressed register is locked.
	// CSR[6:5] : WIRI->Write Ignored Read Ignored
	// CSR[4:3] : A Adress matching Mode 0: OFF, disabled;1: TOR (TopOfRange);
	// 2:NA4,Naturally alligned 4Byte Region;3:NAPOT,Naturally aligned power-of-two-region >=8 bytes 
	// if entry is set to TOR the previous entry is always treated as lower range.
	// CSR[2] : X instruction execution permit
	// CSR[1] : W: Write permit
	// CSR[0] : R: Read permit
	//=> Pattern A:both values;X:dont care;1/0:specified value only
	//=>AXXA|AAAA the "|" is used for better overview
	// PMP-ADDRESS 4x 32 Bit Register holding address
	// csr_pmp_cfg_i connected to rd_data_o of csr.
	// csr_pmp_addr_i
	//a_data is 32 bit.
	//a_address[4:0] are used to address the CSR registers holding 32bit each
	//for a_opcode == PuttFullData or PutPartialData we write:		
	//0->4x8Bit CSR ; 4->Address0;  8->Address1;  12->Address2;  16->Address3
	//28->cpu_go_to_idle (cpu resolves blcok)
	//for a_opcode == Get:
	//0->4x8Bit CSR ; 4->Address0;  8->Address1;  12->Address2;  16->Address3
	//20->get denied addr;  24->denied_req_type;  25->current_state;

	/////////////////////////////////
	// 		TileLink      //
	////////////////////////////////
	//Tilelink has a A-Channel (Ma->Sla) and D-Channel (Sla->Ma) lower
	//lowercase letters idicate the flow direction.
 	//Section 4.1 of TileLink Doc describes ready-valid handshanking:
	//ready-> sender must not 	 process data and sender consider not processed.
	//valid-> receiver must not expect control or data signals to be syntactially correct TileLink beat.
	//valid must(muss) never depend on ready.
	//ready should be hold low by receiver. 
	//valid must be no combinational from ready to valid, but can be.
	//Therefor we can check for device ready low and host valid transmission to find a architectural mistake
	//!!!!!!!For TileLink interface implementation we might consider pwm_reg-top of Open Titan
	//first we write PMP CSR, 4*8 Bits, each of 8 bits is described above
	
	//Verifying RANGE:
	/*
	(t ##0 tl_cpu2csr.a_address <= 32'XXXXX or
	t ##0 tl_cpu2csr.a_address >= 32'XXXXX)
	*/


	//Sequence waiting atleast 12 CLK to send ready 	
	sequence t_ready; 
		await_o(t, 1, tl_csr2cpu.a_ready, 1); 
	endsequence
	//Sequence implementing tl_pmp2h.d_* = tl_d2pmp.d_*
	sequence pmp2h_d_pass_all;
		t ##0 tl_pmp2h.d_valid == tl_d2pmp.d_valid and
		t ##0 tl_pmp2h.d_opcode == tl_d2pmp.d_opcode and
		t ##0 tl_pmp2h.d_param == tl_d2pmp.d_param and
		t ##0 tl_pmp2h.d_size == tl_d2pmp.d_size and
		t ##0 tl_pmp2h.d_source == tl_d2pmp.d_source and
		t ##0 tl_pmp2h.d_sink == tl_d2pmp.d_sink and
		t ##0 tl_pmp2h.d_data == tl_d2pmp.d_data and
		t ##0 tl_pmp2h.d_user == tl_d2pmp.d_user and
		t ##0 tl_pmp2h.d_error == tl_d2pmp.d_error;
	endsequence
	//property idea:
	//L=Lock;X=Dont Care;AA=Adress matching mode;I=Instr.;W=Write;R=Read
	// LXXA|AIWR => 1001|1111;0001|0111;1000|1000;0110|0000


	//General Assumptions:
	// We expect outputs to be set within the same CC.
	//Internal registers of the next state are set one CC later.

	//FSM DRAWING MISTAKE: state transition idle to block irq_d =1 NOT irq_q=1



	

	property INTR_STATE_holding_test;
		logic  INTR_STATE_content;
		t ##0 set_freeze(INTR_STATE_content, INTR_STATE_q) and
		//ensure there is no interrupt set from hardware
		t ##0 irq_d == 1'b0 and
		//(t ##0 tl_cpu2csr.a_opcode == PutFullData or
		//t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
		t ##0 tl_cpu2csr.a_address != 32'h00000010 and
		t ##0 tl_cpu2csr.a_address != 32'h00000011 and
		t ##0 tl_cpu2csr.a_address != 32'h00000012 and
		t ##0 tl_cpu2csr.a_address != 32'h00000013
		implies
		t ##1 INTR_STATE_q == INTR_STATE_content;
	endproperty

	property INTR_ENABLE_holding_test;
		logic  INTR_ENABLE_content;
		t ##0 set_freeze(INTR_ENABLE_content, INTR_ENABLE_q) and
		//(t ##0 tl_cpu2csr.a_opcode == PutFullData or
		//t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
		t ##0 tl_cpu2csr.a_address != 32'h00000014 and
		t ##0 tl_cpu2csr.a_address != 32'h00000015 and
		t ##0 tl_cpu2csr.a_address != 32'h00000016 and
		t ##0 tl_cpu2csr.a_address != 32'h00000017
		implies
		t ##1 INTR_ENABLE_q == INTR_ENABLE_content;
	endproperty

	

	
//perspective from CPU	
`include  "access_controller_TLUL_write.sva"
`include  "access_controller_TLUL_read.sva"
//Will come back to those later.
`include  "access_controller_valid_state_transitions.sva"
`include  "access_controller_invalid_state_transitions.sva"
`include  "access_controll_wrapper_pmp_checks.sva"
	
//Interrupt handling aaaa
/*
	property check_opentitan_interrupt_hangling;
		t ##0 current_state == idle and
		t ##0 pmp_req_err == 1'b1 and
		t ##0 tl_h2pmp.a_valid == 1'b1 and
		t ##0 tl_d2pmp.a_ready == 1'b1 and
		t ##0 cpu_addr_rel ==  '0
		implies
		t ##0 irq_d == 1'b1 and
		t ##1 intr_from_prim_hw_intr == 1'b1;NumPMPEntriesSelecter
	endproperty
*/
	
//Let's talk about some changes.
//We might extend the FSM a bit, so we have a more common model instead of only a TUUL specific

//Interrupt Interface

a_INTR_STATE_holding_test:						assert property (@(posedge clk) disable iff (rst==0) INTR_STATE_holding_test);
a_INTR_ENABLE_holding_test:						assert property (@(posedge clk) disable iff (rst==0) INTR_ENABLE_holding_test);





`end_tda
//Immidiate Assertions
`include  "access_controller_internal_signal_assertions.sva"
endmodule

bind access_control_wrapper ACW_property_suite #(.BaseAddressTB(BaseAddress), .NumPMPEntriesSelecterTB(NumPMPEntriesSelecter)) inst_ACW_property_suite(.*);
