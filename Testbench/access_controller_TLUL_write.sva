////////////////////////
////     CPU2CSR    ////
////////////////////////
property check_pmp_inputs_after_cpu_write_cfg_full_generic(logic [31:0] addr, logic [31:0] data, int csr_index);
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData )and
	t ##0 tl_cpu2csr.a_address == addr and
	t ##0 tl_cpu2csr.a_data == data and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask == 4'b1111 and
	t ##0 tl_csr2cpu.a_ready == 1'b1
	
	implies 
	// Lock/Reserved/Reserved/Mode1/Mode0/Execute/Write/Read
	//csr_pmp_cfg is struct of ibex_pkg::pmp_cfg_t
	// Order {cfg3,cfg2,cfg1,cfg0}
	//Check if the cfg writting works
	t ##0 wr_en_csr[csr_index] == 1'b1 and
	t ##1 tl_csr2cpu.a_ready == 1'b0 and //Hold for 0 , clearify if GET and PUT at the same time are allowed.
	t ##1 csr_pmp_cfg[csr_index*4 + 3].lock == data[31] and
	t ##1 csr_pmp_cfg[csr_index*4 + 2].lock == data[23] and
	t ##1 csr_pmp_cfg[csr_index*4 + 1].lock == data[15] and
	t ##1 csr_pmp_cfg[csr_index*4].lock == data[7] and
	t ##1 csr_pmp_cfg[csr_index*4 + 3].mode == data[28:27] and
	t ##1 csr_pmp_cfg[csr_index*4 + 2].mode == data[20:19] and
	t ##1 csr_pmp_cfg[csr_index*4 + 1].mode == data[12:11] and
	t ##1 csr_pmp_cfg[csr_index*4].mode == data[4:3] and
	t ##1 csr_pmp_cfg[csr_index*4 + 3].exec == data[26] and
	t ##1 csr_pmp_cfg[csr_index*4 + 2].exec == data[18] and
	t ##1 csr_pmp_cfg[csr_index*4 + 1].exec == data[10]and
	t ##1 csr_pmp_cfg[csr_index*4].exec == data[2] and
	t ##1 csr_pmp_cfg[csr_index*4 + 3].write == data[25] and
	t ##1 csr_pmp_cfg[csr_index*4 + 2].write == data[17] and
	t ##1 csr_pmp_cfg[csr_index*4 + 1].write == data[9] and
	t ##1 csr_pmp_cfg[csr_index*4].write == data[1] and
	t ##1 csr_pmp_cfg[csr_index*4 + 3].read == data[24] and
	t ##1 csr_pmp_cfg[csr_index*4 + 2].read == data[16] and
	t ##1 csr_pmp_cfg[csr_index*4 + 1].read == data[8] and
	t ##1 csr_pmp_cfg[csr_index*4].read == data[0];
endproperty
for (genvar i = 0; i < NumberConfigEntries ; i++) 
	begin 
		a_check_pmp_inputs_after_cpu_write_cfg_full_generic : assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_cfg_full_generic(32'h00000000 + NumberBytesRegisterNonPMP + i*(32'h00000004),32'b11111111111111111111111111110000,i));
	end
property check_pmp_inputs_after_cpu_write_cfg_partial_generic(logic [31:0] addr, logic [31:0] data, int csr_index);
	ibex_pkg::pmp_cfg_t csr_pmp_cfg_0_freeze;
	ibex_pkg::pmp_cfg_t csr_pmp_cfg_3_freeze;
	t ##0 set_freeze(csr_pmp_cfg_0_freeze, csr_pmp_cfg[csr_index*4 + 0]) and
	t ##0 set_freeze(csr_pmp_cfg_3_freeze, csr_pmp_cfg[csr_index*4 + 3]) and
	
	t ##0 tl_cpu2csr.a_opcode == PutPartialData and
	t ##0 tl_cpu2csr.a_address == addr and
	t ##0 tl_cpu2csr.a_data == data and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b01 and
	t ##0 tl_cpu2csr.a_mask == 4'b0110 and
	t ##0 tl_csr2cpu.a_ready == 1'b1
	
	implies 

	//csr_pmp_cfg is struct of ibex_pkg::pmp_cfg_t
	// Order {cfg3,cfg2,cfg1,cfg0}
	//Check if the cfg writting works
	t ##0 wr_en_csr[csr_index] == 1'b1 and 
	t ##1 tl_csr2cpu.a_ready == 1'b0 and //Hold for 0 , clearify if GET and PUT at the same time are allowed.
	t ##1 csr_pmp_cfg[csr_index*4 + 0] == csr_pmp_cfg_0_freeze and
	t ##1 csr_pmp_cfg[csr_index*4 + 3] == csr_pmp_cfg_3_freeze and
	t ##1 csr_pmp_cfg[csr_index*4 + 2].lock == data[23] and
	t ##1 csr_pmp_cfg[csr_index*4 + 1].lock == data[15] and
	t ##1 csr_pmp_cfg[csr_index*4 + 2].mode == data[20:19] and
	t ##1 csr_pmp_cfg[csr_index*4 + 1].mode == data[12:11] and
	t ##1 csr_pmp_cfg[csr_index*4 + 2].exec == data[18] and
	t ##1 csr_pmp_cfg[csr_index*4 + 1].exec == data[10]and
	t ##1 csr_pmp_cfg[csr_index*4 + 2].write == data[17] and
	t ##1 csr_pmp_cfg[csr_index*4 + 1].write == data[9] and
	t ##1 csr_pmp_cfg[csr_index*4 + 2].read == data[16] and
	t ##1 csr_pmp_cfg[csr_index*4 + 1].read == data[8];
endproperty
for (genvar i = 0; i < NumberConfigEntries ; i++) 
	begin 
		a_check_pmp_inputs_after_cpu_write_cfg_partial_generic : assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_cfg_partial_generic(32'h00000000 + NumberBytesRegisterNonPMP + i*(32'h00000004),32'b11111111111111111111111111110000,i));
	end


//Uncomment to show Dino

property check_pmp_inputs_after_cpu_write_address_full_generic(logic [31:0] addr, logic [31:0] data, int data_csr_index);
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
	t ##0 tl_cpu2csr.a_address == addr and
	t ##0 tl_cpu2csr.a_data == data and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask == 4'b1111 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 
	implies
	t ##1 rd_data_csr[data_csr_index] == data;
endproperty
//How the assertion looks like:  

//Check if address writes work
$display("The value of TotalIbexCSR is:%d", TotalIbexCSR);
for (genvar i = NumberConfigEntries; i < TotalIbexCSR ; i++) 
	begin 
		a_check_pmp_inputs_after_cpu_write_address_full_generic : assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_address_full_generic(32'h00000000 + NumberBytesRegisterNonPMP + i*(32'h00000004),32'b11111111111111111111111111110000,i));
	end

property check_pmp_inputs_after_cpu_write_address_partial_generic(logic [31:0] addr, logic [31:0] data, int data_csr_index);
	logic [31:0] previous_data;
	t ##0 set_freeze(previous_data, rd_data_csr[1]) and
	t ##0 tl_cpu2csr.a_opcode == PutPartialData and
	t ##0 tl_cpu2csr.a_address == addr and
	t ##0 tl_cpu2csr.a_data == data and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b01 and
	t ##0 tl_cpu2csr.a_mask == 4'b0011 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 
	implies
	t ##1 rd_data_csr[1][31:16] == previous_data[31:16] and
	t ##1 rd_data_csr[1][15:0] == data[15:0];
endproperty
//Check if address writes work
for (genvar i = NumberConfigEntries; i < TotalIbexCSR ; i++) 
	begin 
		a_check_pmp_inputs_after_cpu_write_address_partial_generic : assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_address_full_generic(32'h00000000 + NumberBytesRegisterNonPMP + i*(32'h00000004),32'b11111111111111111111111111110000,i));
	end

property upperbound_OR;
	
	
	//This property expect only 4 entries (5 registers) of pmp
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
	//t ##0 tl_cpu2csr.a_address == 32'h000000F0 and
	//t ##0 tl_cpu2csr.a_address <= 32'h000003FF and
	t ##0 tl_cpu2csr.a_address >= (32'h00000000 + NumberBytesRegisterNonPMP + TotalIbexCSR*(32'h00000004)) and
	t ##0 tl_cpu2csr.a_data == 32'b10011111000101111000100001100000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask == 4'b1111 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 and
	t ##1 tl_cpu2csr.d_ready == 1'b1 
	
	implies 
	t ##1 tl_csr2cpu.d_error == 1'b1 and
	t ##1 activate_cpu_err_resp_q == 1'b1 and
	t ##1 ack_outstanding_q == 1'b0;
	
endproperty

property invalid_cpu_request;
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData or
	t ##0 tl_cpu2csr.a_opcode == Get) and
	t ##0 number_bits_a_mask != a_size_int and
	t ##0 tl_csr2cpu.a_ready == 1'b1 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##1 tl_cpu2csr.d_ready == 1'b1 
	
	implies 
	t ##0 activate_cpu_err_resp_d == 1'b1 and
	t ##1 tl_csr2cpu.d_error == 1'b1 and
	t ##1 activate_cpu_err_resp_q == 1'b1 and
	t ##1 ack_outstanding_q == 1'b0;
	
endproperty



property set_go_to_idle;
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
	t ##0 tl_cpu2csr.a_address == 32'h00000000 and
	t ##0 tl_cpu2csr.a_data == 32'b11111111111111111111111111110000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask == 4'b1111 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 
	implies
	t ##1 go_to_idle_q == 1'b1;
endproperty

property W1C_INTR_STATE_set;
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
	t ##0 tl_cpu2csr.a_address == 32'h00000010 and
	t ##0 tl_cpu2csr.a_data == 32'b10000000000000000000000000000000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask == 4'b1111 and
	t ##0 irq_d == 1'b0 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 
	implies
	t ##1 INTR_STATE_q == 1'b0 and
	t ##1 irq_q == 1'b0;
endproperty
property Write_INTR_ENABLE;
		(t ##0 tl_cpu2csr.a_opcode == PutFullData or
		t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
		t ##0 tl_cpu2csr.a_address == 32'h00000014 and
		t ##0 tl_cpu2csr.a_data == 32'b10000000000000000000000000000000 and 
		t ##0 tl_cpu2csr.a_source == 8'h00 and
		t ##0 tl_cpu2csr.a_valid == 1'b1 and
		t ##0 tl_cpu2csr.a_size == 2'b10 and
		t ##0 tl_cpu2csr.a_mask == 4'b1111 and
		t ##0 tl_csr2cpu.a_ready == 1'b1 
		implies
		t ##1 INTR_ENABLE_q == 1'b1;
	endproperty

//Assertions for CPU->CSR TLUL Interface
//a_check_pmp_inputs_after_cpu_write_cfg_partial:				assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_cfg_partial);
//OR:Out of Range
//a_check_pmp_inputs_after_cpu_write_cfg_full_addressOR:  		assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_cfg_full_addressOR);
//a_check_pmp_inputs_after_cpu_write_cfg_partial_addressOR:  		assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_cfg_partial_addressOR);
a_invalid_cpu_request:							assert property (@(posedge clk) disable iff (rst==0) invalid_cpu_request);
a_upperbound_OR:							assert property (@(posedge clk) disable iff (rst==0) upperbound_OR);
//Go back to idle from cpu
a_set_go_to_idle:							assert property (@(posedge clk) disable iff (rst==0) set_go_to_idle);
//Interrupt
a_W1C_INTR_STATE_set:							assert property (@(posedge clk) disable iff (rst==0) W1C_INTR_STATE_set);
a_Write_INTR_ENABLE:							assert property (@(posedge clk) disable iff (rst==0) Write_INTR_ENABLE);
