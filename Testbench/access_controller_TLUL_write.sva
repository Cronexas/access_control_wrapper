////////////////////////
////     CPU2CSR    ////
////////////////////////

property check_pmp_inputs_after_cpu_write_cfg_full;
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData )and
	t ##0 tl_cpu2csr.a_address == 32'h00000000 and
	t ##0 tl_cpu2csr.a_data == 32'b10011111000101111000100001100000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask == 4'b1111 and
	t ##0 tl_csr2cpu.a_ready == 1'b1
	
	implies 

	//csr_pmp_cfg is struct of ibex_pkg::pmp_cfg_t
	// Order {cfg3,cfg2,cfg1,cfg0}
	//Check if the cfg writting works
	t ##0 wr_en_csr[0] == 1'b1 and
	t ##1 tl_csr2cpu.a_ready == 1'b0 and //Hold for 0 , clearify if GET and PUT at the same time are allowed.
	t ##1 csr_pmp_cfg[3].lock == 1'b1 and
	t ##1 csr_pmp_cfg[2].lock == 1'b0 and
	t ##1 csr_pmp_cfg[1].lock == 1'b1 and
	t ##1 csr_pmp_cfg[0].lock == 1'b0 and
	t ##1 csr_pmp_cfg[3].mode == PMP_MODE_NAPOT and
	t ##1 csr_pmp_cfg[2].mode == PMP_MODE_NA4 and
	t ##1 csr_pmp_cfg[1].mode == PMP_MODE_TOR and
	t ##1 csr_pmp_cfg[0].mode == PMP_MODE_OFF and
	t ##1 csr_pmp_cfg[3].exec == 1'b1 and
	t ##1 csr_pmp_cfg[2].exec == 1'b1 and
	t ##1 csr_pmp_cfg[1].exec == 1'b0 and
	t ##1 csr_pmp_cfg[0].exec == 1'b0 and
	t ##1 csr_pmp_cfg[3].write == 1'b1 and
	t ##1 csr_pmp_cfg[2].write == 1'b1 and
	t ##1 csr_pmp_cfg[1].write == 1'b0 and
	t ##1 csr_pmp_cfg[0].write == 1'b0 and
	t ##1 csr_pmp_cfg[3].read == 1'b1 and
	t ##1 csr_pmp_cfg[2].read == 1'b1 and
	t ##1 csr_pmp_cfg[1].read == 1'b0 and
	t ##1 csr_pmp_cfg[0].read == 1'b0;
endproperty



property check_pmp_inputs_after_cpu_write_address0_full;
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
	t ##0 tl_cpu2csr.a_address == 32'h00000004 and
	t ##0 tl_cpu2csr.a_data == 32'b11111111111111111111111111110000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask == 4'b1111 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 
	implies
	t ##1 rd_data_csr[1] == 32'b11111111111111111111111111110000;
endproperty

property check_pmp_inputs_after_cpu_write_address1_full;

	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
	t ##0 tl_cpu2csr.a_address == 32'h00000008 and
	t ##0 tl_cpu2csr.a_data == 32'b11111111111111111111111111000000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask == 4'b1111 and
	t ##0 tl_csr2cpu.a_ready == 1'b1
	implies
	t ##1 rd_data_csr[2] == 32'b11111111111111111111111111000000;
	

endproperty

property check_pmp_inputs_after_cpu_write_address2_full;
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
	t ##0 tl_cpu2csr.a_address == 32'h0000000C and
	t ##0 tl_cpu2csr.a_data == 32'b11111111111111111111110000000000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask == 4'b1111 and
	t ##0 tl_csr2cpu.a_ready == 1'b1
	implies
	t ##1 rd_data_csr[3] == 32'b11111111111111111111110000000000;

endproperty

property check_pmp_inputs_after_cpu_write_address3_full;
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
	t ##0 tl_cpu2csr.a_address == 32'h00000010 and
	t ##0 tl_cpu2csr.a_data == 32'b11111111111111111100000000000000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask == 4'b1111 and
	t ##0 tl_csr2cpu.a_ready == 1'b1
	implies
	t ##1 rd_data_csr[4] == 32'b11111111111111111100000000000000;

endproperty

property check_pmp_inputs_after_cpu_write_cfg_partial;
	ibex_pkg::pmp_cfg_t csr_pmp_cfg_0_freeze;
	ibex_pkg::pmp_cfg_t csr_pmp_cfg_1_freeze;
	ibex_pkg::pmp_cfg_t csr_pmp_cfg_2_freeze;
	ibex_pkg::pmp_cfg_t csr_pmp_cfg_3_freeze;
	t ##0 set_freeze(csr_pmp_cfg_0_freeze, csr_pmp_cfg[0]) and
	t ##0 set_freeze(csr_pmp_cfg_1_freeze, csr_pmp_cfg[1]) and
	t ##0 set_freeze(csr_pmp_cfg_2_freeze, csr_pmp_cfg[2]) and
	t ##0 set_freeze(csr_pmp_cfg_3_freeze, csr_pmp_cfg[3]) and
	
	t ##0 tl_cpu2csr.a_opcode == PutPartialData and
	t ##0 tl_cpu2csr.a_address == 32'h00000000 and
	t ##0 tl_cpu2csr.a_data == 32'b10011111000101111000100001100000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b01 and
	t ##0 tl_cpu2csr.a_mask == 4'b0110 and
	t ##0 tl_csr2cpu.a_ready == 1'b1
	
	implies 

	//csr_pmp_cfg is struct of ibex_pkg::pmp_cfg_t
	// Order {cfg3,cfg2,cfg1,cfg0}
	//Check if the cfg writting works
	t ##0 wr_en_csr[0] == 1'b1 and 
	t ##1 tl_csr2cpu.a_ready == 1'b0 and //Hold for 0 , clearify if GET and PUT at the same time are allowed.
	t ##1 csr_pmp_cfg[0] == csr_pmp_cfg_0_freeze and
	t ##1 csr_pmp_cfg[3] == csr_pmp_cfg_3_freeze and
	t ##1 csr_pmp_cfg[2].lock == 1'b0 and
	t ##1 csr_pmp_cfg[1].lock == 1'b1 and
	t ##1 csr_pmp_cfg[2].mode == PMP_MODE_NA4 and
	t ##1 csr_pmp_cfg[1].mode == PMP_MODE_TOR and
	t ##1 csr_pmp_cfg[2].exec == 1'b1 and
	t ##1 csr_pmp_cfg[1].exec == 1'b0 and
	t ##1 csr_pmp_cfg[2].write == 1'b1 and
	t ##1 csr_pmp_cfg[1].write == 1'b0 and
	t ##1 csr_pmp_cfg[2].read == 1'b1 and
	t ##1 csr_pmp_cfg[1].read == 1'b0;
endproperty


/**/
property check_pmp_inputs_after_cpu_write_address0_partial;
	logic [31:0] previous_data;
	t ##0 set_freeze(previous_data, rd_data_csr[1]) and
	t ##0 tl_cpu2csr.a_opcode == PutPartialData and
	t ##0 tl_cpu2csr.a_address == 32'h00000004 and
	t ##0 tl_cpu2csr.a_data == 32'b11111111111111111111111111110000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b01 and
	t ##0 tl_cpu2csr.a_mask == 4'b0011 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 
	implies
	t ##1 rd_data_csr[1][31:16] == previous_data[31:16] and
	t ##1 rd_data_csr[1][15:0] == 16'b1111111111110000;
endproperty
/* */
property check_pmp_inputs_after_cpu_write_address1_partial;

	logic [31:0] previous_data;
	t ##0 set_freeze(previous_data, rd_data_csr[2]) and
	t ##0 tl_cpu2csr.a_opcode == PutPartialData and
	t ##0 tl_cpu2csr.a_address == 32'h00000008 and
	t ##0 tl_cpu2csr.a_data == 32'b11111111111111111111111111110000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b01 and
	t ##0 tl_cpu2csr.a_mask == 4'b0011 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 
	implies
	t ##1 rd_data_csr[2][31:16] == previous_data[31:16] and
	t ##1 rd_data_csr[2][15:0] == 16'b1111111111110000;
	

endproperty

property check_pmp_inputs_after_cpu_write_address2_partial;
	logic [31:0] previous_data;
	t ##0 set_freeze(previous_data, rd_data_csr[3]) and
	t ##0 tl_cpu2csr.a_opcode == PutPartialData and
	t ##0 tl_cpu2csr.a_address == 32'h0000000c and
	t ##0 tl_cpu2csr.a_data == 32'b11111111111111111111111111110000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b01 and
	t ##0 tl_cpu2csr.a_mask == 4'b0011 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 
	implies
	t ##1 rd_data_csr[3][31:16] == previous_data[31:16] and
	t ##1 rd_data_csr[3][15:0] == 16'b1111111111110000;

endproperty

property check_pmp_inputs_after_cpu_write_address3_partial;
	logic [31:0] previous_data;
	t ##0 set_freeze(previous_data, rd_data_csr[4]) and
	t ##0 tl_cpu2csr.a_opcode == PutPartialData and
	t ##0 tl_cpu2csr.a_address == 32'h00000010 and
	t ##0 tl_cpu2csr.a_data == 32'b11111111111111111111111111110000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b01 and
	t ##0 tl_cpu2csr.a_mask == 4'b0011 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 
	implies
	t ##1 rd_data_csr[4][31:16] == previous_data[31:16] and
	t ##1 rd_data_csr[4][15:0] == 16'b1111111111110000;

endproperty
/**/



property check_pmp_inputs_after_cpu_write_cfg_full_addressOR;
	
	
	//This property expect only 4 entries (5 registers) of pmp
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
	//t ##0 tl_cpu2csr.a_address == 32'h000000F0 and
	t ##0 tl_cpu2csr.a_address >= 32'h00000014 and
	t ##0 tl_cpu2csr.a_address <= 32'h000003bf and
	t ##0 tl_cpu2csr.a_data == 32'b10011111000101111000100001100000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask == 4'b1111 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 and
	t ##1 tl_cpu2csr.d_ready == 1'b1 
	
	implies 
	t ##1 tl_csr2cpu.d_error == 1'b1 and
	t ##1 activate_cpu_err_resp_q == 1'b1 and
	t ##1 ack_outstanding_q == 1'b0;
	
endproperty

property check_pmp_inputs_after_cpu_write_cfg_partial_addressOR;
	//This property expect only 4 entries (5 registers) of pmp
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
	//t ##0 tl_cpu2csr.a_address == 32'h000000F0 and
	t ##0 tl_cpu2csr.a_address >= 32'h00000014 and
	t ##0 tl_cpu2csr.a_address <= 32'h000003bf and
	t ##0 tl_cpu2csr.a_data == 32'b10011111000101111000100001100000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask != 4'b0000 and
	t ##0 tl_cpu2csr.a_mask != 4'b1111 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 and
	t ##1 tl_cpu2csr.d_ready == 1'b1 
	
	implies 
	t ##1 tl_csr2cpu.d_error == 1'b1 and
	t ##1 activate_cpu_err_resp_q == 1'b1 and
	t ##1 ack_outstanding_q == 1'b0;
	
endproperty

property upperbound_OR;
	
	
	//This property expect only 4 entries (5 registers) of pmp
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
	//t ##0 tl_cpu2csr.a_address == 32'h000000F0 and
	t ##0 tl_cpu2csr.a_address <= 32'h000003FF and
	t ##0 tl_cpu2csr.a_address >= 32'h000003DC and
	t ##0 tl_cpu2csr.a_data == 32'b10011111000101111000100001100000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask == 4'b1111 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 and
	t ##1 tl_cpu2csr.d_ready == 1'b1 
	
	implies 
	t ##1 tl_csr2cpu.d_error == 1'b1 and
	t ##1 activate_cpu_err_resp_q == 1'b1 and
	t ##1 ack_outstanding_q == 1'b0;
	
endproperty

property invalid_cpu_request;
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData or
	t ##0 tl_cpu2csr.a_opcode == Get) and
	t ##0 number_bits_a_mask != a_size_int and
	t ##0 tl_csr2cpu.a_ready == 1'b1 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##1 tl_cpu2csr.d_ready == 1'b1 
	
	implies 
	t ##0 activate_cpu_err_resp_d == 1'b1 and
	t ##1 tl_csr2cpu.d_error == 1'b1 and
	t ##1 activate_cpu_err_resp_q == 1'b1 and
	t ##1 ack_outstanding_q == 1'b0;
	
endproperty



property set_go_to_idle;
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
	t ##0 tl_cpu2csr.a_address == 32'h000003C0 and
	t ##0 tl_cpu2csr.a_data == 32'b11111111111111111111111111110000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask == 4'b1111 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 
	implies
	t ##1 go_to_idle_q == 1'b1;
endproperty

property W1C_INTR_STATE_set;
	(t ##0 tl_cpu2csr.a_opcode == PutFullData or
	t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
	t ##0 tl_cpu2csr.a_address == 32'h000003D0 and
	t ##0 tl_cpu2csr.a_data == 32'b10000000000000000000000000000000 and 
	t ##0 tl_cpu2csr.a_source == 8'h00 and
	t ##0 tl_cpu2csr.a_valid == 1'b1 and
	t ##0 tl_cpu2csr.a_size == 2'b10 and
	t ##0 tl_cpu2csr.a_mask == 4'b1111 and
	t ##0 irq_d == 1'b0 and
	t ##0 tl_csr2cpu.a_ready == 1'b1 
	implies
	t ##1 INTR_STATE_q == 1'b0 and
	t ##1 irq_q == 1'b0;
endproperty
property Write_INTR_ENABLE;
		(t ##0 tl_cpu2csr.a_opcode == PutFullData or
		t ##0 tl_cpu2csr.a_opcode == PutPartialData) and
		t ##0 tl_cpu2csr.a_address == 32'h000003D4 and
		t ##0 tl_cpu2csr.a_data == 32'b10000000000000000000000000000000 and 
		t ##0 tl_cpu2csr.a_source == 8'h00 and
		t ##0 tl_cpu2csr.a_valid == 1'b1 and
		t ##0 tl_cpu2csr.a_size == 2'b10 and
		t ##0 tl_cpu2csr.a_mask == 4'b1111 and
		t ##0 tl_csr2cpu.a_ready == 1'b1 
		implies
		t ##1 INTR_ENABLE_q == 1'b1;
	endproperty

//Assertions for CPU->CSR TLUL Interface
a_check_pmp_inputs_after_cpu_write_cfg_full:  				assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_cfg_full);
a_check_pmp_inputs_after_cpu_write_address0_full:  			assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_address0_full);
a_check_pmp_inputs_after_cpu_write_address1_full:  			assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_address1_full);
a_check_pmp_inputs_after_cpu_write_address2_full:  			assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_address2_full);
a_check_pmp_inputs_after_cpu_write_address3_full:  			assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_address3_full);
a_check_pmp_inputs_after_cpu_write_cfg_partial:				assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_cfg_partial);
a_check_pmp_inputs_after_cpu_write_address0_partial:			assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_address0_partial);
a_check_pmp_inputs_after_cpu_write_address1_partial:			assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_address1_partial);
a_check_pmp_inputs_after_cpu_write_address2_partial:			assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_address2_partial);
a_check_pmp_inputs_after_cpu_write_address3_partial:			assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_address3_partial);
//OR:Out of Range
a_check_pmp_inputs_after_cpu_write_cfg_full_addressOR:  		assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_cfg_full_addressOR);
a_check_pmp_inputs_after_cpu_write_cfg_partial_addressOR:  		assert property (@(posedge clk) disable iff (rst==0) check_pmp_inputs_after_cpu_write_cfg_partial_addressOR);
a_invalid_cpu_request:							assert property (@(posedge clk) disable iff (rst==0) invalid_cpu_request);
a_upperbound_OR:							assert property (@(posedge clk) disable iff (rst==0) upperbound_OR);
//Go back to idle from cpu
a_set_go_to_idle:							assert property (@(posedge clk) disable iff (rst==0) set_go_to_idle);
//Interrupt
a_W1C_INTR_STATE_set:							assert property (@(posedge clk) disable iff (rst==0) W1C_INTR_STATE_set);
a_Write_INTR_ENABLE:							assert property (@(posedge clk) disable iff (rst==0) Write_INTR_ENABLE);
